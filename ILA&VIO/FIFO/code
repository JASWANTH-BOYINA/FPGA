`timescale 1ns / 1ps


module fifo#(parameter length=16,width=8,ptr_width=4)(clk,data_out,w_ptr,r_ptr);
input clk;
output reg[width-1:0] data_out;
wire rst,w_en,r_en;
wire[width-1:0] data_in;

wire full,empty;
output reg [ptr_width-1:0] w_ptr,r_ptr;
reg [ptr_width-1:0] ff_count;
reg [length-1:0] mem[width-1:0];

assign full=(ff_count==16);
assign empty=(ff_count==0);

always@(posedge clk or posedge rst)
   if(rst) begin
      w_ptr<=0;
      r_ptr<=0;
      ff_count<=0;
   end
   else if(w_en==1 && !(full)) begin
      mem[w_ptr]<=data_in;
      w_ptr<=w_ptr+1;
      ff_count<=ff_count+1;
   end
   else if(r_en==1 &&!empty) begin
      data_out<=mem[r_ptr];
      r_ptr<=r_ptr+1;
      ff_count<=ff_count+1;
   end
   
ila_3 your_instance_name (
	.clk(clk), // input wire clk


	.probe0(data_out), // input wire [7:0]  probe0  
	.probe1(w_ptr), // input wire [3:0]  probe1 
	.probe2(r_ptr), // input wire [3:0]  probe2 
	.probe3(w_en), // input wire [0:0]  probe3 
	.probe4(r_en), // input wire [0:0]  probe4 
	.probe5(full), // input wire [0:0]  probe5 
	.probe6(empty) // input wire [0:0]  probe6
);

vio_1 your_instance_name2 (
  .clk(clk),                // input wire clk
  .probe_in0(data_out),    // input wire [7 : 0] probe_in0
  .probe_in1(w_ptr),    // input wire [3 : 0] probe_in1
  .probe_in2(r_ptr),    // input wire [3 : 0] probe_in2
  .probe_out0(data_in),  // output wire [7 : 0] probe_out0
  .probe_out1(w_en),  // output wire [0 : 0] probe_out1
  .probe_out2(r_en),  // output wire [0 : 0] probe_out2
  .probe_out3(rst)  // output wire [0 : 0] probe_out3
);

endmodule
