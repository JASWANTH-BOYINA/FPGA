`timescale 1ns / 1ps


module uart_tx #(
    parameter CLOCK_FREQ = 50000000,
    parameter BAUD_RATE = 9600
)(
    input wire clk,
    output reg tx,
    output reg tx_busy
);
    wire rst,tx_start;
    wire [7:0] tx_data;

    localparam CLKS_PER_BIT = CLOCK_FREQ / BAUD_RATE;
    localparam IDLE = 0, START = 1, DATA = 2, STOP = 3;

    reg [1:0] state = IDLE;
    reg [15:0] clk_cnt = 0;
    reg [2:0] bit_idx = 0;
    reg [7:0] shift_reg;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE; tx <= 1; tx_busy <= 0; clk_cnt <= 0; bit_idx <= 0;
        end else begin
            case (state)
                IDLE: begin
                    tx <= 1;
                    tx_busy <= 0;
                    if (tx_start) begin
                        shift_reg <= tx_data;
                        tx_busy <= 1;
                        state <= START;
                    end
                end
                START: begin
                    tx <= 0;
                    if (clk_cnt < CLKS_PER_BIT - 1) clk_cnt <= clk_cnt + 1;
                    else begin clk_cnt <= 0; state <= DATA; end
                end
                DATA: begin
                    tx <= shift_reg[bit_idx];
                    if (clk_cnt < CLKS_PER_BIT - 1) clk_cnt <= clk_cnt + 1;
                    else begin
                        clk_cnt <= 0;
                        if (bit_idx == 7) state <= STOP;
                        else bit_idx <= bit_idx + 1;
                    end
                end
                STOP: begin
                    tx <= 1;
                    if (clk_cnt < CLKS_PER_BIT - 1) clk_cnt <= clk_cnt + 1;
                    else begin
                        clk_cnt <= 0;
                        state <= IDLE;
                        bit_idx <= 0;
                    end
                end
            endcase
        end
    end
vio_uart_tx your_instance_name (
  .clk(clk),                // input wire clk
  .probe_in0(tx),    // input wire [0 : 0] probe_in0
  .probe_in1(tx_busy),    // input wire [0 : 0] probe_in1
  .probe_out0(rst),  // output wire [0 : 0] probe_out0
  .probe_out1(tx_start),  // output wire [0 : 0] probe_out1
  .probe_out2(tx_data)  // output wire [7 : 0] probe_out2
);

ila_uart_tx your_instance_name2 (
	.clk(clk), // input wire clk


	.probe0(tx), // input wire [0:0]  probe0  
	.probe1(tx_busy), // input wire [0:0]  probe1 
	.probe2(rst), // input wire [7:0]  probe2 
	.probe3(tx_start), // input wire [0:0]  probe3 
	.probe4(tx_data) // input wire [0:0]  probe4
);
endmodule

